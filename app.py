#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from flask import Flask, render_template, jsonify, request
import pandas as pd
import os

# --- Importa√ß√µes das suas fun√ß√µes de an√°lise, conforme a nova estrutura ---
# Certifique-se de que esses arquivos Python (.py) estejam no mesmo diret√≥rio
# ou em um subdiret√≥rio acess√≠vel (no caso, eles est√£o todos no mesmo n√≠vel da pasta +Milionaria/)

# Importa a fun√ß√£o de an√°lise de frequ√™ncia geral
from funcoes.milionaria.funcao_analise_de_frequencia import analise_frequencia_milionaria_completa

# Importa a fun√ß√£o de an√°lise de distribui√ß√£o
from funcoes.milionaria.funcao_analise_de_distribuicao import analise_distribuicao_milionaria
from funcoes.megasena.funcao_analise_de_distribuicao_MS import analise_distribuicao_megasena

# Importa a fun√ß√£o de an√°lise de combina√ß√µes
from funcoes.milionaria.funcao_analise_de_combinacoes import analise_combinacoes_milionaria
from funcoes.megasena.funcao_analise_de_combinacoes_MS import analise_combinacoes_megasena
from funcoes.megasena.funcao_analise_de_padroes_sequencia_MS import analise_padroes_sequencias_megasena

# Importa a fun√ß√£o de an√°lise de padr√µes e sequ√™ncias
from funcoes.milionaria.funcao_analise_de_padroes_sequencia import analise_padroes_sequencias_milionaria

# Importa a fun√ß√£o de an√°lise dos trevos da sorte (frequ√™ncia e combina√ß√µes)
# Assumo que 'analise_trevos_da_sorte' √© a fun√ß√£o principal deste arquivo
from funcoes.milionaria.funcao_analise_de_trevodasorte_frequencia import analise_trevos_da_sorte

# As fun√ß√µes de 'calculos.py' e a classe 'AnaliseEstatisticaAvancada' de 'analise_estatistica_avancada.py'
from funcoes.milionaria.calculos import calcular_seca_numeros, calcular_seca_trevos
from funcoes.megasena.calculos_MS import calcular_seca_numeros_megasena
from funcoes.milionaria.analise_estatistica_avancada import AnaliseEstatisticaAvancada
from funcoes.megasena.analise_estatistica_avancada_MS import AnaliseEstatisticaAvancada as AnaliseEstatisticaAvancadaMS

# --- Importa√ß√µes para Mega Sena ---
from funcoes.megasena.MegasenaFuncaCarregaDadosExcel_MS import carregar_dados_megasena
from funcoes.megasena.gerarCombinacao_numeros_aleatoriosMegasena_MS import gerar_aposta_personalizada


app = Flask(__name__, static_folder='static') # Mant√©m a pasta 'static' para CSS/JS

# Caminho para o arquivo Excel
EXCEL_FILE = 'LoteriasExcel/Milion√°ria_edt.xlsx'
df_milionaria = None # Vari√°vel global para armazenar o DataFrame

# Vari√°vel global para armazenar o DataFrame da Mega Sena
df_megasena = None

def carregar_dados_milionaria():
    """Carrega os dados da +Milion√°ria do arquivo Excel."""
    global df_milionaria
    if df_milionaria is None:
        if os.path.exists(EXCEL_FILE):
            try:
                df = pd.read_excel(EXCEL_FILE)
                # Renomeia as colunas para o padr√£o esperado pelas fun√ß√µes de an√°lise
                df.columns = ['Concurso', 'Bola1', 'Bola2', 'Bola3', 'Bola4', 'Bola5', 'Bola6', 'Trevo1', 'Trevo2']
                # Converte os n√∫meros para tipos num√©ricos, for√ßando erros para NaN e depois Int64
                for col in ['Concurso', 'Bola1', 'Bola2', 'Bola3', 'Bola4', 'Bola5', 'Bola6', 'Trevo1', 'Trevo2']:
                    df[col] = pd.to_numeric(df[col], errors='coerce').astype('Int64')
                df_milionaria = df.dropna().reset_index(drop=True) # Remove linhas com NaN ap√≥s convers√£o
                print(f"Dados da +Milion√°ria carregados. Total de concursos: {len(df_milionaria)}")
            except Exception as e:
                print(f"Erro ao carregar o arquivo Excel: {e}")
                df_milionaria = pd.DataFrame() # Retorna DataFrame vazio em caso de erro
        else:
            print(f"Arquivo Excel n√£o encontrado: {EXCEL_FILE}")
            df_milionaria = pd.DataFrame() # Retorna DataFrame vazio se o arquivo n√£o existir
    return df_milionaria

def carregar_dados_megasena_app():
    """Carrega os dados da Mega Sena do arquivo Excel."""
    global df_megasena
    if df_megasena is None:
        try:
            df_megasena = carregar_dados_megasena(limite_concursos=500)  # Limitar aos √∫ltimos 500 concursos para melhor sensibilidade estat√≠stica
            print(f"Dados da Mega Sena carregados. Total de concursos: {len(df_megasena)}")
        except Exception as e:
            print(f"Erro ao carregar dados da Mega Sena: {e}")
            df_megasena = pd.DataFrame() # Retorna DataFrame vazio em caso de erro
    return df_megasena

# Carrega os dados na inicializa√ß√£o do aplicativo
with app.app_context():
    carregar_dados_milionaria()
    carregar_dados_megasena_app()

@app.route('/')
def landing_page():
    """Renderiza a landing page principal."""
    return render_template('landing.html')

@app.route('/dashboard')
def dashboard():
    """Renderiza a p√°gina principal do dashboard."""
    return render_template('dashboard_milionaria.html')

# --- Rotas de API para as An√°lises ---

# ROTA REMOVIDA: /api/analise_frequencia (antiga) - Substitu√≠da por /api/analise-frequencia
# Para evitar confus√£o e manter consist√™ncia, use apenas a nova rota

@app.route('/api/analise-frequencia')
def get_analise_frequencia_nova():
    """Nova rota para an√°lise de frequ√™ncia com dados reais dos √∫ltimos 50 concursos."""
    try:
        print("üîç Iniciando API de frequ√™ncia...")
        
        # Usar a nova fun√ß√£o que carrega dados reais
        from funcoes.milionaria.funcao_analise_de_frequencia import analisar_frequencia
        
        # Obter par√¢metro de quantidade de concursos (padr√£o: 50)
        qtd_concursos = request.args.get('qtd_concursos', type=int, default=50)
        print(f"üîç qtd_concursos: {qtd_concursos}")
        
        # Executar an√°lise com dados reais
        print("üîç Chamando analisar_frequencia...")
        resultado = analisar_frequencia(df_milionaria=df_milionaria, qtd_concursos=qtd_concursos)
        print(f"üîç Resultado tipo: {type(resultado)}")
        print(f"üîç Resultado: {resultado}")
        
        if not resultado or resultado == {}:
            print("‚ùå Resultado vazio ou None")
            return jsonify({'error': 'Erro ao carregar dados de frequ√™ncia.'}), 500

        return jsonify({
            'frequencia_absoluta_numeros': [{'numero': k, 'frequencia': v} for k, v in sorted(resultado['frequencia_absoluta']['numeros'].items())],
            'frequencia_absoluta_trevos': [{'trevo': k, 'frequencia': v} for k, v in sorted(resultado['frequencia_absoluta']['trevos'].items())],
            'frequencia_relativa_numeros': [{'numero': k, 'frequencia': v} for k, v in sorted(resultado['frequencia_relativa']['numeros'].items())],
            'frequencia_relativa_trevos': [{'trevo': k, 'frequencia': v} for k, v in sorted(resultado['frequencia_relativa']['trevos'].items())],
            'numeros_quentes_frios': resultado['numeros_quentes_frios'],
            'analise_temporal': resultado['analise_temporal'],
            'periodo_analisado': resultado['periodo_analisado']
        })
    except Exception as e:
        print(f"‚ùå Erro na API de frequ√™ncia: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/analise-frequencia-MS')
def get_analise_frequencia_megasena():
    """Nova rota para an√°lise de frequ√™ncia da Mega Sena com dados reais dos √∫ltimos 50 concursos."""
    try:
        print("üîç Iniciando API de frequ√™ncia Mega Sena...")
        
        # Usar a fun√ß√£o da Mega Sena
        from funcoes.megasena.funcao_analise_de_frequencia_MS import analisar_frequencia
        
        # Obter par√¢metro de quantidade de concursos (padr√£o: 50)
        qtd_concursos = request.args.get('qtd_concursos', type=int, default=50)
        print(f"üîç qtd_concursos: {qtd_concursos}")
        
        # Executar an√°lise com dados reais da Mega Sena
        print("üîç Chamando analisar_frequencia Mega Sena...")
        resultado = analisar_frequencia(df_megasena=df_megasena, qtd_concursos=qtd_concursos)
        print(f"üîç Resultado tipo: {type(resultado)}")
        print(f"üîç Resultado: {resultado}")
        
        if not resultado or resultado == {}:
            print("‚ùå Resultado vazio ou None")
            return jsonify({'error': 'Erro ao carregar dados de frequ√™ncia da Mega Sena.'}), 500

        # Preparar dados dos concursos individuais para a matriz visual
        concursos_para_matriz = []
        if 'periodo_analisado' in resultado and 'concursos_do_periodo' in resultado['periodo_analisado']:
            # Converter dados do DataFrame para formato da matriz
            # Se qtd_concursos for None (todos os concursos), limitar a 500 para evitar loop
            limite_efetivo = qtd_concursos if qtd_concursos else 500
            df_filtrado = df_megasena.tail(limite_efetivo)
            for _, row in df_filtrado.iterrows():
                if not pd.isna(row['Concurso']):
                    concursos_para_matriz.append({
                        'concurso': int(row['Concurso']),
                        'numeros': [int(row['Bola1']), int(row['Bola2']), int(row['Bola3']), 
                                   int(row['Bola4']), int(row['Bola5']), int(row['Bola6'])]
                    })

        return jsonify({
            'frequencia_absoluta_numeros': [{'numero': k, 'frequencia': v} for k, v in sorted(resultado['frequencia_absoluta']['numeros'].items())],
            'frequencia_relativa_numeros': [{'numero': k, 'frequencia': v} for k, v in sorted(resultado['frequencia_relativa']['numeros'].items())],
            'numeros_quentes_frios': resultado['numeros_quentes_frios'],
            'analise_temporal': resultado['analise_temporal'],
            'periodo_analisado': resultado['periodo_analisado'],
            'concursos_para_matriz': concursos_para_matriz  # Dados para a matriz visual
        })
    except Exception as e:
        print(f"‚ùå Erro na API de frequ√™ncia Mega Sena: {e}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/analise_padroes_sequencias', methods=['GET'])
def get_analise_padroes_sequencias():
    """Retorna os dados da an√°lise de padr√µes e sequ√™ncias."""
    if df_milionaria.empty:
        return jsonify({"error": "Dados da +Milion√°ria n√£o carregados."}), 500

    # Verificar se h√° par√¢metro de quantidade de concursos
    qtd_concursos = request.args.get('qtd_concursos', type=int)
    print(f"üéØ Padr√µes/Sequ√™ncias - Par√¢metro qtd_concursos: {qtd_concursos}")

    dados_para_analise = df_milionaria.values.tolist()
    resultado = analise_padroes_sequencias_milionaria(dados_para_analise, qtd_concursos)
    return jsonify(resultado)

@app.route('/api/analise_de_distribuicao', methods=['GET'])
def get_analise_de_distribuicao():
    """Retorna os dados da an√°lise de distribui√ß√£o."""
    if df_milionaria.empty:
        return jsonify({"error": "Dados da +Milion√°ria n√£o carregados."}), 500

    # Verificar se h√° par√¢metro de quantidade de concursos
    qtd_concursos = request.args.get('qtd_concursos', type=int)
    print(f"üéØ Distribui√ß√£o - Par√¢metro qtd_concursos: {qtd_concursos}")

    resultado = analise_distribuicao_milionaria(df_milionaria, qtd_concursos)
    return jsonify(resultado)

@app.route('/api/analise_de_distribuicao-MS', methods=['GET'])
def get_analise_de_distribuicao_megasena():
    """Retorna os dados da an√°lise de distribui√ß√£o da Mega Sena."""
    try:
        if df_megasena.empty:
            return jsonify({"error": "Dados da Mega Sena n√£o carregados."}), 500

        # Verificar se h√° par√¢metro de quantidade de concursos
        qtd_concursos = request.args.get('qtd_concursos', type=int)
        print(f"üéØ Distribui√ß√£o Mega Sena - Par√¢metro qtd_concursos: {qtd_concursos}")
        print(f"üéØ Tipo de df_megasena: {type(df_megasena)}")
        print(f"üéØ Shape de df_megasena: {df_megasena.shape if hasattr(df_megasena, 'shape') else 'N/A'}")

        resultado = analise_distribuicao_megasena(df_megasena, qtd_concursos)
        print(f"üéØ Resultado da an√°lise: {type(resultado)}")
        print(f"üéØ Chaves do resultado: {list(resultado.keys()) if resultado else 'N/A'}")
        
        return jsonify(resultado)
    except Exception as e:
        print(f"‚ùå Erro na API de distribui√ß√£o Mega Sena: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

@app.route('/api/analise_de_combinacoes-MS', methods=['GET'])
def get_analise_de_combinacoes_megasena():
    """Retorna os dados da an√°lise de combina√ß√µes da Mega Sena."""
    try:
        if df_megasena.empty:
            return jsonify({"error": "Dados da Mega Sena n√£o carregados."}), 500

        # Verificar se h√° par√¢metro de quantidade de concursos
        qtd_concursos = request.args.get('qtd_concursos', type=int)
        print(f"üéØ Combina√ß√µes Mega Sena - Par√¢metro qtd_concursos: {qtd_concursos}")
        print(f"üéØ Tipo de df_megasena: {type(df_megasena)}")
        print(f"üéØ Shape de df_megasena: {df_megasena.shape if hasattr(df_megasena, 'shape') else 'N/A'}")

        resultado = analise_combinacoes_megasena(df_megasena, qtd_concursos)
        print(f"üéØ Resultado da an√°lise: {type(resultado)}")
        print(f"üéØ Chaves do resultado: {list(resultado.keys()) if resultado else 'N/A'}")
        
        return jsonify(resultado)
    except Exception as e:
        print(f"‚ùå Erro na API de combina√ß√µes Mega Sena: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

@app.route('/api/analise_padroes_sequencias-MS', methods=['GET'])
def get_analise_padroes_sequencias_megasena():
    """Retorna os dados da an√°lise de padr√µes e sequ√™ncias da Mega Sena."""
    try:
        if df_megasena.empty:
            return jsonify({"error": "Dados da Mega Sena n√£o carregados."}), 500

        # Verificar se h√° par√¢metro de quantidade de concursos
        qtd_concursos = request.args.get('qtd_concursos', type=int)
        print(f"üéØ Padr√µes/Sequ√™ncias Mega Sena - Par√¢metro qtd_concursos: {qtd_concursos}")
        print(f"üéØ Tipo de df_megasena: {type(df_megasena)}")
        print(f"üéØ Shape de df_megasena: {df_megasena.shape if hasattr(df_megasena, 'shape') else 'N/A'}")

        resultado = analise_padroes_sequencias_megasena(df_megasena, qtd_concursos)
        print(f"üéØ Resultado da an√°lise: {type(resultado)}")
        print(f"üéØ Chaves do resultado: {list(resultado.keys()) if resultado else 'N/A'}")
        
        return jsonify(resultado)
    except Exception as e:
        print(f"‚ùå Erro na API de padr√µes/sequ√™ncias Mega Sena: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

@app.route('/api/analise_de_combinacoes', methods=['GET'])
def get_analise_de_combinacoes():
    """Retorna os dados da an√°lise de combina√ß√µes."""
    try:
        # Verificar se df_milionaria √© DataFrame ou lista
        if df_milionaria is None:
            return jsonify({"error": "Dados da +Milion√°ria n√£o carregados."}), 500
        
        # Se for DataFrame, verificar se est√° vazio
        if hasattr(df_milionaria, 'empty') and df_milionaria.empty:
            return jsonify({"error": "DataFrame da +Milion√°ria est√° vazio."}), 500
        
        # Se for lista, verificar se est√° vazia
        if isinstance(df_milionaria, list) and len(df_milionaria) == 0:
            return jsonify({"error": "Lista de dados da +Milion√°ria est√° vazia."}), 500

        print(f"Tipo de df_milionaria: {type(df_milionaria)}")
        
        # Converter para lista se necess√°rio
        if hasattr(df_milionaria, 'values'):
            dados_para_analise = df_milionaria.values.tolist()
        else:
            dados_para_analise = df_milionaria
            
        print(f"Dados para an√°lise: {len(dados_para_analise)} linhas")
        
        # Verificar se h√° par√¢metro de quantidade de concursos
        qtd_concursos = request.args.get('qtd_concursos')
        if qtd_concursos:
            qtd_concursos = int(qtd_concursos)
            print(f"üéØ Par√¢metro qtd_concursos recebido: {qtd_concursos}")
        else:
            print(f"üéØ Nenhum par√¢metro qtd_concursos recebido")
        
        resultado = analise_combinacoes_milionaria(dados_para_analise, qtd_concursos)
        print(f"Resultado obtido: {type(resultado)}")
        
        # Debug detalhado do resultado
        if resultado and 'afinidade_entre_numeros' in resultado:
            afinidades = resultado['afinidade_entre_numeros']
            print(f"=== DEBUG AFINIDADES BACKEND ===")
            print(f"Tipo de afinidades: {type(afinidades)}")
            print(f"Chaves em afinidades: {list(afinidades.keys())}")
            
            if 'pares_com_maior_afinidade' in afinidades:
                pares = afinidades['pares_com_maior_afinidade']
                print(f"Tipo de pares_com_maior_afinidade: {type(pares)}")
                print(f"√â lista? {isinstance(pares, list)}")
                print(f"Tamanho: {len(pares) if isinstance(pares, list) else 'N/A'}")
                
                if isinstance(pares, list) and len(pares) > 0:
                    print(f"Primeiro par: {pares[0]}")
                    print(f"Tipo do primeiro par: {type(pares[0])}")
                    print(f"Estrutura do primeiro par: {pares[0]}")
        
        if not resultado:
            return jsonify({"error": "Erro ao processar an√°lise de combina√ß√µes."}), 500
            
        return jsonify(resultado)
        
    except Exception as e:
        print(f"Erro na API de combina√ß√µes: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500

@app.route('/api/analise_trevos_da_sorte', methods=['GET'])
def get_analise_trevos_da_sorte():
    """Retorna os dados da an√°lise dos trevos da sorte (frequ√™ncia, combina√ß√µes e correla√ß√£o)."""
    try:
        if df_milionaria.empty:
            return jsonify({"error": "Dados da +Milion√°ria n√£o carregados."}), 500

        # Verificar se h√° par√¢metro de quantidade de concursos
        qtd_concursos = request.args.get('qtd_concursos', type=int)
        print(f"üéØ Trevos - Par√¢metro qtd_concursos: {qtd_concursos}")

        # Note: A fun√ß√£o 'analise_trevos_da_sorte' foi ajustada para aceitar o DataFrame diretamente.
        resultado = analise_trevos_da_sorte(df_milionaria, qtd_concursos)
        
        if not resultado:
            return jsonify({"error": "Resultado da an√°lise de trevos est√° vazio."}), 404
            
        return jsonify(resultado)
        
    except Exception as e:
        print(f"Erro na API de trevos: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500


@app.route('/api/analise_seca', methods=['GET'])
def get_analise_seca():
    """Retorna os dados da an√°lise de seca dos n√∫meros principais e trevos."""
    try:
        if df_milionaria.empty:
            return jsonify({"error": "Dados da +Milion√°ria n√£o carregados."}), 500

        # Verificar se h√° par√¢metro de quantidade de concursos
        qtd_concursos = request.args.get('qtd_concursos', type=int)

        # Calcular seca dos n√∫meros principais
        numeros_seca = calcular_seca_numeros(df_milionaria, qtd_concursos=qtd_concursos)
        
        # Calcular seca dos trevos
        trevos_seca = calcular_seca_trevos(df_milionaria, qtd_concursos=qtd_concursos)

        # Verificar se os dados est√£o v√°lidos
        if not numeros_seca or not trevos_seca:
            return jsonify({"error": "Falha ao calcular an√°lise de seca."}), 400

        return jsonify({
            "numeros_seca": numeros_seca,
            "trevos_seca": trevos_seca
        })

    except Exception as e:
        print(f"Erro na API de seca: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500


@app.route('/api/analise_seca_MS', methods=['GET'])
def get_analise_seca_megasena():
    """Retorna os dados da an√°lise de seca dos n√∫meros da Mega Sena."""
    try:
        print("üîç API de seca da Mega Sena chamada!")
        
        if df_megasena is None or df_megasena.empty:
            print("‚ùå Dados da Mega Sena n√£o carregados")
            return jsonify({'error': 'Dados da Mega Sena n√£o carregados.'}), 500

        qtd_concursos = request.args.get('qtd_concursos', type=int)
        print(f"üìà An√°lise de Seca Mega Sena - Par√¢metro qtd_concursos: {qtd_concursos}")
        print(f"üìä DataFrame dispon√≠vel: {len(df_megasena)} concursos")

        # Executar an√°lise de seca
        print("‚ö° Executando an√°lise de seca da Mega Sena...")
        resultado = calcular_seca_numeros_megasena(df_megasena, qtd_concursos)
        
        print("‚úÖ An√°lise de seca conclu√≠da!")
        print(f"üìä Resultados obtidos:")
        print(f"   - N√∫meros em seca: {'‚úÖ' if resultado.get('seca_por_numero') else '‚ùå'}")
        print(f"   - M√©dia de seca: {'‚úÖ' if resultado.get('estatisticas', {}).get('seca_media') else '‚ùå'}")
        print(f"   - M√°xima seca: {'‚úÖ' if resultado.get('estatisticas', {}).get('seca_maxima') else '‚ùå'}")

        # Retornar no formato esperado pelo frontend
        return jsonify({
            "numeros_seca": resultado
        })

    except Exception as e:
        print(f"‚ùå Erro na API de seca da Mega Sena: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500


@app.route('/api/estatisticas_avancadas', methods=['GET'])
def get_estatisticas_avancadas():
    """Retorna os dados das estat√≠sticas avan√ßadas."""
    try:
        print("üîç Iniciando requisi√ß√£o para /api/estatisticas_avancadas")
        
        if df_milionaria is None or df_milionaria.empty:
            print("‚ùå Dados da +Milion√°ria n√£o carregados")
            return jsonify({'error': 'Dados da +Milion√°ria n√£o carregados.'}), 500

        qtd_concursos = request.args.get('qtd_concursos', type=int)
        print(f"üìà Estat√≠sticas Avan√ßadas - Par√¢metro qtd_concursos: {qtd_concursos}")
        print(f"üìä DataFrame dispon√≠vel: {len(df_milionaria)} concursos")

        # Criar inst√¢ncia da classe de an√°lise
        print("üîß Criando inst√¢ncia da AnaliseEstatisticaAvancada...")
        analise = AnaliseEstatisticaAvancada(df_milionaria)
        
        # Executar an√°lise completa
        print("‚ö° Executando an√°lise completa...")
        resultado = analise.executar_analise_completa(qtd_concursos)
        
        print("‚úÖ An√°lise conclu√≠da! Verificando resultados...")
        
        # Log detalhado dos resultados
        if resultado:
            print(f"üìä Resultados obtidos:")
            print(f"   - Desvio padr√£o: {'‚úÖ' if resultado.get('desvio_padrao_distribuicao') else '‚ùå'}")
            print(f"   - Teste aleatoriedade: {'‚úÖ' if resultado.get('teste_aleatoriedade') else '‚ùå'}")
            print(f"   - An√°lise clusters: {'‚úÖ' if resultado.get('analise_clusters') else '‚ùå'}")
            print(f"   - Correla√ß√£o n√∫meros: {'‚úÖ' if resultado.get('analise_correlacao_numeros') else '‚ùå'}")
            print(f"   - Probabilidades condicionais: {'‚úÖ' if resultado.get('probabilidades_condicionais') else '‚ùå'}")
            print(f"   - Distribui√ß√£o n√∫meros: {'‚úÖ' if resultado.get('distribuicao_numeros') else '‚ùå'}")
            
                    # Log espec√≠fico para correla√ß√£o
        if resultado.get('analise_correlacao_numeros'):
            correlacao = resultado['analise_correlacao_numeros']
            print(f"üîç Dados de correla√ß√£o enviados ao frontend:")
            print(f"   - Correla√ß√µes positivas: {len(correlacao.get('correlacoes_positivas', []))}")
            print(f"   - Correla√ß√µes negativas: {len(correlacao.get('correlacoes_negativas', []))}")
            print(f"   - Correla√ß√£o m√©dia: {correlacao.get('correlacao_media', 0.0):.4f}")
            if correlacao.get('correlacoes_positivas'):
                print(f"   - Amostra positivas: {correlacao['correlacoes_positivas'][:3]}")
            if correlacao.get('correlacoes_negativas'):
                print(f"   - Amostra negativas: {correlacao['correlacoes_negativas'][:3]}")
            
            # Verificar se os dados s√£o serializ√°veis para JSON
            try:
                import json
                json_test = json.dumps(correlacao)
                print(f"‚úÖ Dados de correla√ß√£o s√£o serializ√°veis para JSON")
            except Exception as json_error:
                print(f"‚ùå Erro ao serializar dados de correla√ß√£o: {json_error}")
        else:
            print("‚ùå Dados de correla√ß√£o n√£o encontrados no resultado!")
        
        if not resultado:
            print("‚ùå Nenhum resultado obtido!")

        # Verificar se h√° valores NaN ou infinitos antes de retornar
        def limpar_valores_problematicos(obj):
            if isinstance(obj, dict):
                return {k: limpar_valores_problematicos(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [limpar_valores_problematicos(v) for v in obj]
            elif isinstance(obj, float):
                import numpy as np
                if np.isnan(obj) or np.isinf(obj):
                    return 0.0
                return obj
            else:
                return obj
        
        # Limpar valores problem√°ticos
        resultado_limpo = limpar_valores_problematicos(resultado)
        print("‚úÖ Dados limpos de valores problem√°ticos")

        return jsonify(resultado_limpo)

    except Exception as e:
        print(f"‚ùå Erro na API de estat√≠sticas avan√ßadas: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500


@app.route('/api/estatisticas_avancadas_MS', methods=['GET'])
def get_estatisticas_avancadas_megasena():
    """Retorna os dados das estat√≠sticas avan√ßadas da Mega Sena."""
    try:
        print("üîç Iniciando requisi√ß√£o para /api/estatisticas_avancadas_MS")
        
        if df_megasena is None or df_megasena.empty:
            print("‚ùå Dados da Mega Sena n√£o carregados")
            return jsonify({'error': 'Dados da Mega Sena n√£o carregados.'}), 500

        qtd_concursos = request.args.get('qtd_concursos', type=int)
        print(f"üìà Estat√≠sticas Avan√ßadas Mega Sena - Par√¢metro qtd_concursos: {qtd_concursos}")
        print(f"üìä DataFrame dispon√≠vel: {len(df_megasena)} concursos")

        # Criar inst√¢ncia da classe de an√°lise da Mega Sena
        print("üîß Criando inst√¢ncia da AnaliseEstatisticaAvancadaMS...")
        analise = AnaliseEstatisticaAvancadaMS(df_megasena)
        
        # Executar an√°lise completa
        print("‚ö° Executando an√°lise completa da Mega Sena...")
        resultado = analise.executar_analise_completa(qtd_concursos)
        
        print("‚úÖ An√°lise da Mega Sena conclu√≠da! Verificando resultados...")
        
        # Log detalhado dos resultados
        if resultado:
            print(f"üìä Resultados obtidos:")
            print(f"   - Desvio padr√£o: {'‚úÖ' if resultado.get('desvio_padrao_distribuicao') else '‚ùå'}")
            print(f"   - Teste aleatoriedade: {'‚úÖ' if resultado.get('teste_aleatoriedade') else '‚ùå'}")
            print(f"   - An√°lise clusters: {'‚úÖ' if resultado.get('analise_clusters') else '‚ùå'}")
            print(f"   - Correla√ß√£o n√∫meros: {'‚úÖ' if resultado.get('analise_correlacao_numeros') else '‚ùå'}")
            print(f"   - Probabilidades condicionais: {'‚úÖ' if resultado.get('probabilidades_condicionais') else '‚ùå'}")
            print(f"   - Distribui√ß√£o n√∫meros: {'‚úÖ' if resultado.get('distribuicao_numeros') else '‚ùå'}")
        else:
            print("‚ùå Nenhum resultado obtido!")

        # Verificar se h√° valores NaN ou infinitos antes de retornar
        def limpar_valores_problematicos(obj):
            if isinstance(obj, dict):
                return {k: limpar_valores_problematicos(v) for k, v in obj.items()}
            elif isinstance(obj, list):
                return [limpar_valores_problematicos(v) for v in obj]
            elif isinstance(obj, float):
                import numpy as np
                if np.isnan(obj) or np.isinf(obj):
                    return 0.0
                return obj
            else:
                return obj
        
        # Limpar valores problem√°ticos
        resultado_limpo = limpar_valores_problematicos(resultado)
        print("‚úÖ Dados limpos de valores problem√°ticos")

        return jsonify(resultado_limpo)

    except Exception as e:
        print(f"‚ùå Erro na API de estat√≠sticas avan√ßadas da Mega Sena: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({"error": f"Erro interno: {str(e)}"}), 500


# --- Rota para manifesta√ß√£o de interesse em bol√µes (sem persist√™ncia para este exemplo) ---
@app.route('/api/gerar-numeros-aleatorios', methods=['GET'])
def gerar_numeros_aleatorios():
    """Gera n√∫meros aleat√≥rios para +Milion√°ria (6 n√∫meros + 2 trevos)."""
    try:
        import random
        
        # Gerar 6 n√∫meros √∫nicos entre 1 e 50
        numeros = sorted(random.sample(range(1, 51), 6))
        
        # Gerar 2 trevos √∫nicos entre 1 e 6
        trevo1 = random.randint(1, 6)
        trevo2 = random.randint(1, 6)
        while trevo2 == trevo1:  # Garantir que sejam diferentes
            trevo2 = random.randint(1, 6)
        
        return jsonify({
            "success": True,
            "numeros": numeros,
            "trevo1": trevo1,
            "trevo2": trevo2,
            "mensagem": "N√∫meros gerados com sucesso!"
        })
        
    except Exception as e:
        logger.error(f"Erro ao gerar n√∫meros aleat√≥rios: {e}")
        return jsonify({
            "success": False,
            "error": "Erro interno do servidor"
        }), 500

@app.route('/api/gerar-aposta-milionaria', methods=['POST'])
def gerar_aposta_milionaria_api():
    """Gera aposta personalizada para +Milion√°ria com quantidade configur√°vel."""
    try:
        data = request.get_json()
        qtde_num = data.get('qtde_num')
        qtde_trevo1 = data.get('qtde_trevo1')
        qtde_trevo2 = data.get('qtde_trevo2')

        if qtde_num is None or qtde_trevo1 is None or qtde_trevo2 is None:
            return jsonify({'error': 'Par√¢metros qtde_num, qtde_trevo1 e qtde_trevo2 s√£o obrigat√≥rios.'}), 400

        # Importar a fun√ß√£o de gera√ß√£o personalizada
        from funcoes.milionaria.gerarCombinacao_numeros_aleatoriosMilionaria import gerar_aposta_personalizada
        
        # Chama a fun√ß√£o principal de gera√ß√£o de aposta
        numeros, trevo1, trevo2, valor, qtde_apostas = gerar_aposta_personalizada(qtde_num, qtde_trevo1, qtde_trevo2)

        return jsonify({
            'success': True,
            'numeros': numeros,
            'trevo1': trevo1,
            'trevo2': trevo2,
            'valor': valor,
            'qtde_apostas': qtde_apostas,
            'mensagem': 'Aposta gerada com sucesso!'
        })

    except ValueError as e:
        logger.error(f"Erro de valida√ß√£o ao gerar aposta: {e}")
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        logger.error(f"Erro inesperado ao gerar aposta: {e}")
        return jsonify({'error': 'Erro interno do servidor ao gerar aposta.'}), 500

@app.route('/api/gerar-aposta-megasena', methods=['POST'])
def gerar_aposta_megasena_api():
    """Gera aposta personalizada para Mega Sena com quantidade configur√°vel."""
    try:
        data = request.get_json()
        qtde_num = data.get('qtde_num')

        if qtde_num is None:
            return jsonify({'error': 'Par√¢metro qtde_num √© obrigat√≥rio.'}), 400

        # Importar a fun√ß√£o de gera√ß√£o personalizada da Mega Sena
        from funcoes.megasena.gerarCombinacao_numeros_aleatoriosMegasena_MS import gerar_aposta_personalizada
        
        # Chama a fun√ß√£o principal de gera√ß√£o de aposta
        numeros, valor, qtde_apostas = gerar_aposta_personalizada(qtde_num)

        return jsonify({
            'success': True,
            'numeros': numeros,
            'valor': valor,
            'qtde_apostas': qtde_apostas,
            'mensagem': 'Aposta gerada com sucesso!'
        })

    except ValueError as e:
        logger.error(f"Erro de valida√ß√£o ao gerar aposta Mega Sena: {e}")
        return jsonify({'error': str(e)}), 400
    except Exception as e:
        logger.error(f"Erro inesperado ao gerar aposta Mega Sena: {e}")
        return jsonify({'error': 'Erro interno do servidor ao gerar aposta.'}), 500

@app.route('/api/bolao_interesse', methods=['POST'])
def bolao_interesse():
    data = request.json
    nome = data.get('nome')
    email = data.get('email')
    telefone = data.get('telefone')
    mensagem = data.get('mensagem')

    # TODO: Aqui voc√™ implementaria a l√≥gica para salvar esses dados (ex: em um banco de dados,
    # enviar um email para voc√™, etc.). Por enquanto, apenas imprime.
    print(f"Novo interesse em bol√£o recebido:")
    print(f"  Nome: {nome}")
    print(f"  Email: {email}")
    print(f"  Telefone: {telefone}")
    print(f"  Mensagem: {mensagem}")

    return jsonify({"message": "Interesse registrado com sucesso! Entraremos em contato."}), 200

@app.route('/boloes')
def boloes_loterias():
    """Renderiza a p√°gina de bol√µes de loterias."""
    return render_template('boloes_loterias.html')

# --- Rotas da Mega Sena ---
@app.route('/dashboard_MS')
def dashboard_megasena():
    """Renderiza a p√°gina principal do dashboard da Mega Sena."""
    return render_template('dashboard_megasena.html')

@app.route('/aposta_inteligente_premium_MS')
def aposta_inteligente_premium_megasena():
    """Renderiza a p√°gina de Aposta Inteligente Premium da Mega Sena."""
    return render_template('analise_estatistica_avancada_megasena.html')

@app.route('/aposta_inteligente_premium')
def aposta_inteligente_premium():
    """Renderiza a p√°gina de Aposta Inteligente Premium."""
    return render_template('analise_estatistica_avancada_milionaria.html')

@app.route('/api/gerar_aposta_premium', methods=['POST'])
def gerar_aposta_premium():
    """Gera aposta inteligente usando Machine Learning."""
    try:
        from funcoes.milionaria.geracao_inteligente import gerar_aposta_inteligente
        
        # Obter dados do request
        data = request.get_json()
        
        # O frontend envia o objeto userPremiumPreferences completo
        preferencias_ml = data  # Usar diretamente o objeto enviado
        
        print(f"üìä Prefer√™ncias recebidas: {preferencias_ml}")
        
        # Carregar dados de an√°lise para o cache
        analysis_cache = {}
        
        # Carregar dados de frequ√™ncia se necess√°rio
        if any(key in preferencias_ml for key in ['frequencia', 'trevos']):
            try:
                from funcoes.milionaria.funcao_analise_de_frequencia import analisar_frequencia
                dados_freq = analisar_frequencia(qtd_concursos=50)  # √öltimos 50 concursos
                analysis_cache['frequencia_completa'] = dados_freq
                analysis_cache['frequencia_25'] = analisar_frequencia(qtd_concursos=25)  # √öltimos 25 concursos
                print("‚úÖ Dados de frequ√™ncia carregados (50 e 25 concursos)")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar frequ√™ncia: {e}")
        
        # Carregar dados de padr√µes se necess√°rio
        if any(key in preferencias_ml for key in ['padroes']):
            try:
                from funcoes.milionaria.funcao_analise_de_padroes_sequencia import analise_padroes_sequencias_milionaria
                dados_padroes = analise_padroes_sequencias_milionaria()
                analysis_cache['padroes_completa'] = dados_padroes
                print("‚úÖ Dados de padr√µes carregados")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar padr√µes: {e}")
        
        # Carregar dados de trevos se necess√°rio
        if any(key in preferencias_ml for key in ['trevos']):
            try:
                from funcoes.milionaria.funcao_analise_de_trevodasorte_frequencia import analise_trevos_da_sorte
                dados_trevos = analise_trevos_da_sorte()
                analysis_cache['trevos_completa'] = dados_trevos
                print("‚úÖ Dados de trevos carregados")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar trevos: {e}")
        
        # Carregar dados avan√ßados se necess√°rio
        if any(key in preferencias_ml for key in ['clusters']):
            try:
                from funcoes.milionaria.analise_estatistica_avancada import realizar_analise_estatistica_avancada
                dados_avancados = realizar_analise_estatistica_avancada()
                analysis_cache['avancada'] = dados_avancados
                print("‚úÖ Dados avan√ßados carregados")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao carregar dados avan√ßados: {e}")
        
        print(f"üìä Cache de an√°lise preparado: {list(analysis_cache.keys())}")
        
        # Gerar apostas usando Machine Learning
        apostas_geradas = gerar_aposta_inteligente(preferencias_ml, analysis_cache)
        
        print(f"üéØ Apostas geradas: {len(apostas_geradas)}")
        
        return jsonify({
            'success': True,
            'apostas': apostas_geradas,
            'mensagem': f'Aposta inteligente gerada com sucesso! ({len(apostas_geradas)} apostas)'
        })
        
    except Exception as e:
        print(f"‚ùå Erro ao gerar aposta premium: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            'success': False,
            'error': f'Erro interno: {str(e)}'
        }), 500

if __name__ == '__main__':
    # Configura√ß√µes otimizadas para melhor performance
    port = int(os.environ.get('PORT', 5000))
    app.run(
        debug=False,  # Desabilita debug para melhor performance
        host='0.0.0.0', 
        port=port,
        threaded=True,  # Habilita threading
        use_reloader=False  # Desabilita reloader autom√°tico
    ) 