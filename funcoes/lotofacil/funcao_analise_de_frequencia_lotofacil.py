#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import pandas as pd
import numpy as np
import logging
from collections import Counter

# Configura√ß√£o do logger
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def analisar_frequencia_lotofacil(qtd_concursos=50):
    """
    Analisa a frequ√™ncia dos n√∫meros da Lotof√°cil nos √∫ltimos concursos.
    
    Args:
        qtd_concursos (int): Quantidade de concursos a analisar
        
    Returns:
        dict: Dicion√°rio com n√∫meros quentes, frios e secos
    """
    try:
        import sys
        import os
        sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
        from funcoes.lotofacil.LotofacilFuncaCarregaDadosExcel import obter_ultimos_concursos_lotofacil
        
        # Obt√©m os √∫ltimos concursos
        df = obter_ultimos_concursos_lotofacil(qtd_concursos)
        if df is None:
            logger.error("N√£o foi poss√≠vel carregar os dados da Lotof√°cil")
            return None
        
        logger.info(f"Analisando frequ√™ncia dos √∫ltimos {qtd_concursos} concursos da Lotof√°cil")
        
        # Lista para armazenar todos os n√∫meros sorteados
        todos_numeros = []
        
        # Itera sobre as linhas do DataFrame
        for index, row in df.iterrows():
            # Procura por colunas que contenham n√∫meros (01-25)
            for col in df.columns:
                valor = row[col]
                if pd.notna(valor) and str(valor).isdigit():
                    numero = int(valor)
                    if 1 <= numero <= 25:  # Lotof√°cil tem n√∫meros de 1 a 25
                        todos_numeros.append(numero)
        
        # Conta a frequ√™ncia de cada n√∫mero
        contador = Counter(todos_numeros)
        
        # Cria dicion√°rio com todos os n√∫meros (1-25) e suas frequ√™ncias
        frequencias = {}
        for i in range(1, 26):
            frequencias[i] = contador.get(i, 0)
        
        # Ordena por frequ√™ncia (mais frequente primeiro)
        numeros_ordenados = sorted(frequencias.items(), key=lambda x: x[1], reverse=True)
        
        # Define n√∫meros quentes (mais frequentes - top 8)
        numeros_quentes = [num for num, freq in numeros_ordenados[:8]]
        
        # Define n√∫meros frios (menos frequentes - bottom 8)
        numeros_frios = [num for num, freq in numeros_ordenados[-8:]]
        
        # Define n√∫meros secos (n√£o sorteados)
        numeros_secos = [num for num, freq in frequencias.items() if freq == 0]
        
        # Log dos resultados
        logger.info(f"N√∫meros quentes: {numeros_quentes}")
        logger.info(f"N√∫meros frios: {numeros_frios}")
        logger.info(f"N√∫meros secos: {numeros_secos}")
        
        return {
            'numeros_quentes': numeros_quentes,
            'numeros_frios': numeros_frios,
            'numeros_secos': numeros_secos,
            'frequencias_completas': dict(frequencias),
            'total_concursos_analisados': qtd_concursos
        }
        
    except Exception as e:
        logger.error(f"Erro ao analisar frequ√™ncia da Lotof√°cil: {str(e)}")
        return None

def obter_estatisticas_rapidas_lotofacil():
    """
    Obt√©m estat√≠sticas r√°pidas da Lotof√°cil para exibi√ß√£o no dashboard.
    
    Returns:
        dict: Dicion√°rio com estat√≠sticas resumidas
    """
    try:
        resultado = analisar_frequencia_lotofacil(25)  # √öltimos 25 concursos
        
        if resultado is None:
            # Retorna dados simulados em caso de erro
            return {
                'numeros_quentes': [1, 2, 3, 4, 5, 6, 7, 8],
                'numeros_frios': [18, 19, 20, 21, 22, 23, 24, 25],
                'numeros_secos': [],
                'status': 'simulado'
            }
        
        return {
            'numeros_quentes': resultado['numeros_quentes'],
            'numeros_frios': resultado['numeros_frios'],
            'numeros_secos': resultado['numeros_secos'],
            'status': 'real'
        }
        
    except Exception as e:
        logger.error(f"Erro ao obter estat√≠sticas r√°pidas da Lotof√°cil: {str(e)}")
        # Retorna dados simulados em caso de erro
        return {
            'numeros_quentes': [1, 2, 3, 4, 5, 6, 7, 8],
            'numeros_frios': [18, 19, 20, 21, 22, 23, 24, 25],
            'numeros_secos': [],
            'status': 'simulado'
        }

if __name__ == "__main__":
    # Teste das fun√ß√µes
    print("üß™ Testando an√°lise de frequ√™ncia da Lotof√°cil...")
    
    resultado = analisar_frequencia_lotofacil(10)
    if resultado:
        print("‚úÖ An√°lise realizada com sucesso!")
        print(f"N√∫meros quentes: {resultado['numeros_quentes']}")
        print(f"N√∫meros frios: {resultado['numeros_frios']}")
        print(f"N√∫meros secos: {resultado['numeros_secos']}")
    else:
        print("‚ùå Erro na an√°lise")
    
    print("\nüß™ Testando estat√≠sticas r√°pidas...")
    stats = obter_estatisticas_rapidas_lotofacil()
    print(f"Status: {stats['status']}")
    print(f"N√∫meros quentes: {stats['numeros_quentes']}")
    print(f"N√∫meros frios: {stats['numeros_frios']}")
    print(f"N√∫meros secos: {stats['numeros_secos']}")
