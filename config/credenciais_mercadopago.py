#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Credenciais do Mercado Pago - CONFIGURA√á√ÉO TEMPOR√ÅRIA
"""

# ============================================================================
# üîë SUAS CREDENCIAIS DO MERCADO PAGO
# ============================================================================

# Credenciais de teste
MERCADOPAGO_ACCESS_TOKEN = "dev_24c65fb163bf11ea96500242ac130004"
MERCADOPAGO_PUBLIC_KEY = "dev_24c65fb163bf11ea96500242ac130004"

# Modo de opera√ß√£o (true = sandbox/teste, false = produ√ß√£o)
MERCADOPAGO_SANDBOX = True

# URLs de retorno
MERCADOPAGO_SUCCESS_URL = "http://localhost:5000/pagamento/sucesso"
MERCADOPAGO_FAILURE_URL = "http://localhost:5000/pagamento/cancelado"
MERCADOPAGO_PENDING_URL = "http://localhost:5000/pagamento/pendente"
MERCADOPAGO_WEBHOOK_URL = "http://localhost:5000/webhook/mercadopago"

# Configura√ß√µes de notifica√ß√£o
SMS_CONFIRMATION_ENABLED = True
EMAIL_CONFIRMATION_ENABLED = True

# ============================================================================
# üì± CONFIGURA√á√ïES DE NOTIFICA√á√ÉO
# ============================================================================

# Twilio para SMS (j√° configurado)
TWILIO_ACCOUNT_SID = ""
TWILIO_AUTH_TOKEN = ""
TWILIO_PHONE_NUMBER = ""

# SendGrid para Email (j√° configurado)
SENDGRID_API_KEY = ""
FROM_EMAIL = "dacosta_ef@hotmail.com"

# ============================================================================
# üéØ CONFIGURA√á√ïES DOS PLANOS
# ============================================================================

PLANOS_MERCADOPAGO = {
    'daily': {
        'nome': 'Plano Di√°rio',
        'preco': 5.00,
        'descricao': 'Acesso di√°rio √†s funcionalidades premium',
        'duracao_dias': 1
    },
    'monthly': {
        'nome': 'Plano Mensal',
        'preco': 29.90,
        'descricao': 'Acesso mensal √†s funcionalidades premium',
        'duracao_dias': 30
    },
    'semiannual': {
        'nome': 'Plano Semestral',
        'preco': 149.90,
        'descricao': 'Acesso semestral √†s funcionalidades premium',
        'duracao_dias': 180
    },
    'annual': {
        'nome': 'Plano Anual',
        'preco': 269.90,
        'descricao': 'Acesso anual √†s funcionalidades premium',
        'duracao_dias': 365
    },
    'lifetime': {
        'nome': 'Plano Vital√≠cio',
        'preco': 997.00,
        'descricao': 'Acesso vital√≠cio √†s funcionalidades premium',
        'duracao_dias': 9999  # Vital√≠cio
    }
}

# ============================================================================
# üîç VALIDA√á√ÉO DAS CONFIGURA√á√ïES
# ============================================================================

def validar_configuracao():
    """Valida se as configura√ß√µes est√£o corretas."""
    erros = []
    
    if not MERCADOPAGO_ACCESS_TOKEN:
        erros.append("MERCADOPAGO_ACCESS_TOKEN n√£o configurado")
    
    if not MERCADOPAGO_PUBLIC_KEY:
        erros.append("MERCADOPAGO_PUBLIC_KEY n√£o configurado")
    
    if SMS_CONFIRMATION_ENABLED and not TWILIO_ACCOUNT_SID:
        erros.append("TWILIO_ACCOUNT_SID n√£o configurado para SMS")
    
    if EMAIL_CONFIRMATION_ENABLED and not SENDGRID_API_KEY:
        erros.append("SENDGRID_API_KEY n√£o configurado para Email")
    
    return erros

# ============================================================================
# üìä INFORMA√á√ïES DE DEBUG
# ============================================================================

def get_config_info():
    """Retorna informa√ß√µes da configura√ß√£o para debug."""
    return {
        'sandbox_mode': MERCADOPAGO_SANDBOX,
        'has_access_token': bool(MERCADOPAGO_ACCESS_TOKEN),
        'has_public_key': bool(MERCADOPAGO_PUBLIC_KEY),
        'sms_enabled': SMS_CONFIRMATION_ENABLED,
        'email_enabled': EMAIL_CONFIRMATION_ENABLED,
        'webhook_url': MERCADOPAGO_WEBHOOK_URL
    }

if __name__ == "__main__":
    print("üîß Configura√ß√£o do Mercado Pago")
    print("=" * 50)
    
    erros = validar_configuracao()
    if erros:
        print("‚ùå Erros encontrados:")
        for erro in erros:
            print(f"   - {erro}")
    else:
        print("‚úÖ Configura√ß√£o v√°lida!")
    
    print("\nüìä Informa√ß√µes da configura√ß√£o:")
    info = get_config_info()
    for key, value in info.items():
        print(f"   {key}: {value}")
