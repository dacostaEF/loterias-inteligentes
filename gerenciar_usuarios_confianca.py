#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script para gerenciar usu√°rios de confian√ßa
"""

import sys
import os
import hashlib
from datetime import datetime

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importar configura√ß√£o do banco
from database.db_config import get_db_connection

def listar_usuarios_confianca():
    """Lista todos os usu√°rios de confian√ßa."""
    conn = get_db_connection()
    if not conn:
        print("‚ùå Erro ao conectar ao banco!")
        return
    
    cursor = conn.cursor()
    
    print("üë• USU√ÅRIOS DE CONFIAN√áA:")
    print("=" * 80)
    
    cursor.execute("""
        SELECT id, nome_completo, email, nivel, ativo, data_criacao, ultimo_acesso, criado_por, observacoes
        FROM usuarios_confianca
        ORDER BY data_criacao DESC
    """)
    
    usuarios = cursor.fetchall()
    
    if not usuarios:
        print("‚ùå Nenhum usu√°rio de confian√ßa encontrado!")
        return
    
    for usuario in usuarios:
        id_user, nome, email, nivel, ativo, data_criacao, ultimo_acesso, criado_por, obs = usuario
        
        status = "‚úÖ Ativo" if ativo else "‚ùå Inativo"
        ultimo = ultimo_acesso.strftime("%d/%m/%Y %H:%M") if ultimo_acesso else "Nunca"
        
        print(f"ID: {id_user}")
        print(f"Nome: {nome}")
        print(f"Email: {email}")
        print(f"N√≠vel: {nivel}")
        print(f"Status: {status}")
        print(f"Criado em: {data_criacao.strftime('%d/%m/%Y %H:%M')}")
        print(f"√öltimo acesso: {ultimo}")
        print(f"Criado por: {criado_por}")
        print(f"Observa√ß√µes: {obs or 'Nenhuma'}")
        print("-" * 80)
    
    conn.close()

def adicionar_usuario_confianca():
    """Adiciona um novo usu√°rio de confian√ßa."""
    print("\n‚ûï ADICIONAR USU√ÅRIO DE CONFIAN√áA")
    print("=" * 50)
    
    nome = input("Nome completo: ").strip()
    email = input("Email: ").strip()
    senha = input("Senha: ").strip()
    nivel = input("N√≠vel (CONFIANCA/VIP/PARTNER): ").strip().upper()
    criado_por = input("Criado por (seu nome): ").strip()
    obs = input("Observa√ß√µes (opcional): ").strip()
    
    if not all([nome, email, senha, nivel]):
        print("‚ùå Todos os campos obrigat√≥rios devem ser preenchidos!")
        return
    
    if nivel not in ['CONFIANCA', 'VIP', 'PARTNER']:
        print("‚ùå N√≠vel deve ser CONFIANCA, VIP ou PARTNER!")
        return
    
    conn = get_db_connection()
    if not conn:
        print("‚ùå Erro ao conectar ao banco!")
        return
    
    cursor = conn.cursor()
    
    # Verificar se email j√° existe
    cursor.execute("SELECT id FROM usuarios_confianca WHERE email = ?", (email,))
    if cursor.fetchone():
        print("‚ùå Email j√° existe!")
        conn.close()
        return
    
    # Hash da senha
    senha_hash = hashlib.sha256(senha.encode()).hexdigest()
    
    # Inserir usu√°rio
    cursor.execute("""
        INSERT INTO usuarios_confianca (nome_completo, email, senha_hash, nivel, criado_por, observacoes)
        VALUES (?, ?, ?, ?, ?, ?)
    """, (nome, email, senha_hash, nivel, criado_por, obs))
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ Usu√°rio {nome} adicionado com sucesso!")
    print(f"üìß Email: {email}")
    print(f"üîë Senha: {senha}")
    print(f"üë§ N√≠vel: {nivel}")

def remover_usuario_confianca():
    """Remove um usu√°rio de confian√ßa."""
    print("\nüóëÔ∏è REMOVER USU√ÅRIO DE CONFIAN√áA")
    print("=" * 50)
    
    email = input("Email do usu√°rio a ser removido: ").strip()
    
    if not email:
        print("‚ùå Email √© obrigat√≥rio!")
        return
    
    conn = get_db_connection()
    if not conn:
        print("‚ùå Erro ao conectar ao banco!")
        return
    
    cursor = conn.cursor()
    
    # Verificar se usu√°rio existe
    cursor.execute("SELECT nome_completo FROM usuarios_confianca WHERE email = ?", (email,))
    usuario = cursor.fetchone()
    
    if not usuario:
        print("‚ùå Usu√°rio n√£o encontrado!")
        conn.close()
        return
    
    confirmar = input(f"Tem certeza que deseja remover {usuario[0]}? (s/N): ").strip().lower()
    
    if confirmar in ['s', 'sim', 'y', 'yes']:
        cursor.execute("DELETE FROM usuarios_confianca WHERE email = ?", (email,))
        conn.commit()
        print(f"‚úÖ Usu√°rio {usuario[0]} removido com sucesso!")
    else:
        print("‚ùå Opera√ß√£o cancelada!")
    
    conn.close()

def alterar_senha_usuario():
    """Altera a senha de um usu√°rio de confian√ßa."""
    print("\nüîë ALTERAR SENHA DE USU√ÅRIO")
    print("=" * 50)
    
    email = input("Email do usu√°rio: ").strip()
    nova_senha = input("Nova senha: ").strip()
    
    if not all([email, nova_senha]):
        print("‚ùå Email e nova senha s√£o obrigat√≥rios!")
        return
    
    conn = get_db_connection()
    if not conn:
        print("‚ùå Erro ao conectar ao banco!")
        return
    
    cursor = conn.cursor()
    
    # Verificar se usu√°rio existe
    cursor.execute("SELECT nome_completo FROM usuarios_confianca WHERE email = ?", (email,))
    usuario = cursor.fetchone()
    
    if not usuario:
        print("‚ùå Usu√°rio n√£o encontrado!")
        conn.close()
        return
    
    # Hash da nova senha
    nova_senha_hash = hashlib.sha256(nova_senha.encode()).hexdigest()
    
    # Atualizar senha
    cursor.execute("UPDATE usuarios_confianca SET senha_hash = ? WHERE email = ?", (nova_senha_hash, email))
    conn.commit()
    conn.close()
    
    print(f"‚úÖ Senha alterada com sucesso para {usuario[0]}!")
    print(f"üîë Nova senha: {nova_senha}")

def menu_principal():
    """Menu principal do gerenciador."""
    while True:
        print("\n" + "=" * 60)
        print("üîê GERENCIADOR DE USU√ÅRIOS DE CONFIAN√áA")
        print("=" * 60)
        print("1. üë• Listar usu√°rios")
        print("2. ‚ûï Adicionar usu√°rio")
        print("3. üóëÔ∏è Remover usu√°rio")
        print("4. üîë Alterar senha")
        print("5. ‚ùå Sair")
        print("=" * 60)
        
        opcao = input("Escolha uma op√ß√£o: ").strip()
        
        if opcao == '1':
            listar_usuarios_confianca()
        elif opcao == '2':
            adicionar_usuario_confianca()
        elif opcao == '3':
            remover_usuario_confianca()
        elif opcao == '4':
            alterar_senha_usuario()
        elif opcao == '5':
            print("üëã At√© logo!")
            break
        else:
            print("‚ùå Op√ß√£o inv√°lida!")

if __name__ == "__main__":
    menu_principal()
